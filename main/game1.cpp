
#include <Arduino.h>
#include <TFT_eSPI.h>
#include <SPI.h>
#include "game1.h"

#define TFT_WIDTH  240
#define TFT_HEIGHT 320
#define TILE_SIZE  50   // Example: Each tile is 16x16 pixels
#define WORLD_WIDTH  480   // Example: World is twice the width of the screen
#define WORLD_HEIGHT 640   // Example: World is twice the height of the screen

int playerX = 0;
extern TFT_eSPI tft;

void gameLoop() {
  // Scroll the world
    int scrollX = constrain(playerX - (TFT_WIDTH + TILE_SIZE) / 2, 0, WORLD_WIDTH - TFT_WIDTH - TILE_SIZE);
    int scrollY = constrain(playerX - (TFT_HEIGHT + TILE_SIZE) / 2, 0, WORLD_HEIGHT - TFT_HEIGHT - TILE_SIZE);
    playerX++;
    //scrollY++;

  // Draw the visible portion of the world
  drawWorld(scrollX, scrollY);
}

// Example: Bitmap data for a single tile (16x16 pixels)
// This is just a placeholder, replace it with your actual tile data
const uint16_t tileBitmap[TILE_SIZE * TILE_SIZE] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xFC, 0x07, 0x00, 0x00, 0x00, 0x82, 0x7F, 0xF0, 
  0x1F, 0x00, 0x00, 0x00, 0xC6, 0xFF, 0xC3, 0x3F, 0x00, 0x00, 0x00, 0xE7, 
  0xFF, 0x8F, 0x7F, 0x00, 0x00, 0x80, 0xE3, 0xFF, 0x1F, 0xFE, 0x00, 0x00, 
  0x80, 0xE1, 0xFF, 0x7F, 0xFC, 0x01, 0x00, 0xC0, 0x00, 0xFF, 0xFF, 0xF8, 
  0x03, 0x00, 0xE0, 0x00, 0xE0, 0xFF, 0xF1, 0x03, 0x00, 0x60, 0xF0, 0x81, 
  0xFF, 0xE3, 0x07, 0x00, 0x60, 0xFC, 0x1F, 0xFE, 0xC7, 0x07, 0x00, 0x30, 
  0xFE, 0x7F, 0xF8, 0x8F, 0x0F, 0x00, 0x30, 0xFF, 0xFF, 0xF1, 0x9F, 0x0F, 
  0x00, 0xB0, 0xFF, 0xFF, 0xE3, 0x3F, 0x0F, 0x00, 0xB0, 0xFF, 0xFF, 0xC7, 
  0x3F, 0x1E, 0x00, 0xB8, 0xFF, 0xFF, 0x8F, 0x7F, 0x1E, 0x00, 0x98, 0x1F, 
  0xFC, 0x3F, 0xFF, 0x1C, 0x00, 0xB8, 0x3F, 0xE0, 0x3F, 0xFE, 0x1C, 0x00, 
  0x98, 0xFF, 0xC3, 0x7F, 0xFE, 0x19, 0x00, 0x98, 0xFF, 0x0F, 0xFF, 0xFC, 
  0x19, 0x00, 0x38, 0xFF, 0x3F, 0xFF, 0xFC, 0x01, 0x00, 0x30, 0xFE, 0x7F, 
  0xFE, 0xF9, 0x03, 0x00, 0x30, 0xFC, 0xFF, 0xFC, 0xF9, 0x03, 0x00, 0x30, 
  0xF8, 0xFF, 0xF8, 0xF3, 0x03, 0x00, 0x30, 0x00, 0xFF, 0xF9, 0xF3, 0x03, 
  0x00, 0x70, 0x00, 0xFC, 0xF9, 0xF3, 0x07, 0x00, 0x60, 0x00, 0xF8, 0xF3, 
  0xF3, 0x07, 0x00, 0xE0, 0xF8, 0xF8, 0xF3, 0xF7, 0x03, 0x00, 0xC0, 0xF8, 
  0xF1, 0xF3, 0xE3, 0x03, 0x00, 0xC0, 0xFD, 0xF1, 0xF3, 0xF7, 0x01, 0x00, 
  0x80, 0xFD, 0xF1, 0xF3, 0xE7, 0x00, 0x00, 0x00, 0xFF, 0xF1, 0xF3, 0x07, 
  0x00, 0x00, 0x00, 0xFF, 0xF8, 0xF3, 0x07, 0x00, 0x00, 0x00, 0x7E, 0xF8, 
  0xF3, 0x83, 0x03, 0x00, 0x00, 0x3C, 0xF8, 0xF3, 0xC3, 0x01, 0x00, 0x00, 
  0x70, 0xF8, 0xF9, 0xE3, 0x00, 0x00, 0x00, 0xE0, 0xE1, 0x41, 0x78, 0x00, 
  0x00, 0x00, 0xC0, 0x0F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFD, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00,
};

void drawWorld(int offsetX, int offsetY) {
  // Clear the screen
  //tft.fillScreen(TFT_BLACK);

  // Calculate the number of tiles that fit on the screen
  int numTilesX = (TFT_WIDTH + TILE_SIZE * 2 - 1) / TILE_SIZE;
  int numTilesY = (TFT_HEIGHT + TILE_SIZE * 2 - 1) / TILE_SIZE;

  // Calculate the starting tile position
  int startX = offsetX / TILE_SIZE;
  int startY = offsetY / TILE_SIZE;

  // Calculate the offset within the starting tile
  int offsetXInTile = offsetX % TILE_SIZE;
  int offsetYInTile = offsetY % TILE_SIZE;

  // Loop through visible tiles and draw them
  for (int y = 0; y < numTilesY; y++) {
    for (int x = 0; x < numTilesX; x++) {
      // Calculate the world coordinates of the tile
      int worldX = startX + x;
      int worldY = startY + y;

      // Check if the tile is within the bounds of the world
      if (worldX < 0 || worldX >= WORLD_WIDTH / TILE_SIZE ||
          worldY < 0 || worldY >= WORLD_HEIGHT / TILE_SIZE) {
        continue; // Skip drawing out-of-bounds tiles
      }

      // Calculate the screen coordinates to draw the tile
      int screenX = x * TILE_SIZE - offsetXInTile;
      int screenY = y * TILE_SIZE - offsetYInTile;

      // Draw the tile
      drawTile(tileBitmap, screenX, screenY);
    }
  }
}

void drawTile(const uint16_t* bitmap, int x, int y) {
  // Draw the tile bitmap at the specified position
  tft.pushImage(x, y, TILE_SIZE, TILE_SIZE, bitmap);
}
